### Jessica Seabolt CMP SCI 4280 Project 1 Updated 03/12/2024 ###

Lexical Analyzer (Scanner). Uses option 3, FSA Table + Driver.
    The FSA table is defined in the initFSATable() function in scanner.c.
    The driver function is getToken() in scanner.c.

This C project implements a lexical analyzer (scanner) based on the provided lexical definitions. The scanner reads input from either standard input or a file and tokenizes the input according to the defined rules.


Features

    Supports case-sensitive identifiers, keywords, operators, and integers
    Handles comments starting with "//"
    Reports scanner errors with line numbers and character counts
    Implemented using an FSA table and driver ( )

Files

    main.c: The main entry point of the program, processes command-line arguments and calls the scanner tester
    scanner.c: Implementation of the scanner logic
    scanner.h: Header file for the scanner, containing function declarations and definitions
    testScanner.c: Implementation of the scanner tester
    testScanner.h: Header file for the scanner tester
    token.h: Header file defining the token types and structures

Usage

    To compile the project, simply use the provided Makefile by running the command:

        make

    To run the scanner, use one of the following commands:

    ./scanner [file]

        If [file] is provided, the scanner will read input from the specified file.
        If no file is provided, the scanner will read input from standard input.

    Example usage:

    ./scanner input.txt

    or

    ./scanner < input.txt

    or

    ./scanner


The scanner recognizes the following lexical elements:

    Identifiers: Begin with an uppercase or lowercase letter and can contain letters, underscores, or digits.
    Keywords: start, stop, while, repeat, until, label, return, cin, cout, tape, jump, if, then, pick, create, set, func.
    Operators and delimiters: =, <, >, ==, =!=, :, :=, +, -, *, /, ^, ., (, ), ,, {, }, ;, [, ], ||, &&.
    Integers: Any sequence of decimal digits, no sign, no decimal point.
    Comments: Start with "//" and turn the rest of the line into a comment.

The scanner reports errors for any unrecognized characters or tokens that exceed the maximum length (currently 256 because it seemed like a nice number).
Testing

The scanner tester is implemented in testScanner.c. It calls the getToken() function repeatedly until an EOF_TK token is returned. For each token, it prints the token type, token instance (if applicable), line number, and character number.

To test the scanner, compile the project and run it with an input file, redirect input from a file, or input text directly.